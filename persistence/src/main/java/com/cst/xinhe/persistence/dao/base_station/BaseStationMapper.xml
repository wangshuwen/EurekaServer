<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cst.xinhe.persistence.dao.base_station.BaseStationMapper">
  <resultMap id="BaseResultMap" type="com.cst.xinhe.persistence.model.base_station.BaseStation">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="base_station_id" jdbcType="INTEGER" property="baseStationId" />
    <result column="base_station_num" jdbcType="INTEGER" property="baseStationNum" />
    <result column="base_station_ip" jdbcType="VARCHAR" property="baseStationIp" />
    <result column="software_version" jdbcType="VARCHAR" property="softwareVersion" />
    <result column="hardware_version" jdbcType="VARCHAR" property="hardwareVersion" />
    <result column="power_supply" jdbcType="VARCHAR" property="powerSupply" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="position_x" jdbcType="DOUBLE" property="positionX" />
    <result column="position_y" jdbcType="DOUBLE" property="positionY" />
    <result column="position_z" jdbcType="DOUBLE" property="positionZ" />
    <result column="channel" jdbcType="INTEGER" property="channel" />
    <result column="emissive_power" jdbcType="INTEGER" property="emissivePower" />
    <result column="antenna_gain" jdbcType="INTEGER" property="antennaGain" />
    <result column="encryption" jdbcType="INTEGER" property="encryption" />
    <result column="SSID" jdbcType="VARCHAR" property="ssid" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="subnet_mask" jdbcType="VARCHAR" property="subnetMask" />
    <result column="zone_id" jdbcType="INTEGER" property="zoneId" />
    <result column="area_id" jdbcType="INTEGER" property="areaId" />
    <result column="base_station_name" jdbcType="VARCHAR" property="baseStationName" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="frequency" jdbcType="DOUBLE" property="frequency" />
  </resultMap>
  <!--<cache type="com.cst.xinhe.persistence.cache.MybatisRedisCache">-->
    <!--<property name="eviction" value="LRU" />-->
    <!--<property name="flushInterval" value="6000000" />-->
    <!--<property name="size" value="1024" />-->
    <!--<property name="readOnly" value="true" />-->
    <!--<property name="cacheEnabled" value="true"/>-->
  <!--</cache>-->
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
    <sql id="Base_Column_List">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        base_station_id as baseStationId, base_station.base_station_num as baseStationNum, base_station_ip as
        baseStationIp,
        software_version as softwareVersion, hardware_version as hardwareVersion,
        power_supply as powerSupply, create_time as createTime, remark as remark, update_time updateTime, position_x as
        positionX, position_y as positionY, position_z as positionZ,
        channel as channel, emissive_power as emissivePower, antenna_gain as antennaGain, encryption as encryption, SSID
        as ssid
        , status as status, subnet_mask as subnetMask, base_station_name as baseStationName,type,frequency
    </sql>

    <select id="selectByExample" parameterType="com.cst.xinhe.persistence.model.base_station.BaseStationExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from base_station
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultType="com.cst.xinhe.persistence.model.base_station.BaseStation">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <include refid="Base_Column_List" />
    from base_station
    where base_station_id = #{baseStationId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from base_station
    where base_station_id = #{baseStationId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.cst.xinhe.persistence.model.base_station.BaseStationExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from base_station
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.cst.xinhe.persistence.model.base_station.BaseStation">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into base_station (base_station_id, base_station_num, base_station_ip,
      software_version, hardware_version, power_supply,
      create_time, remark, update_time,
      position_x, position_y, position_z,
      channel, emissive_power, antenna_gain,
      encryption, SSID, status,
      subnet_mask, zone_id, area_id,
      base_station_name, type, frequency
      )
    values (#{baseStationId,jdbcType=INTEGER}, #{baseStationNum,jdbcType=INTEGER}, #{baseStationIp,jdbcType=VARCHAR},
      #{softwareVersion,jdbcType=VARCHAR}, #{hardwareVersion,jdbcType=VARCHAR}, #{powerSupply,jdbcType=VARCHAR},
      #{createTime,jdbcType=TIMESTAMP}, #{remark,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP},
      #{positionX,jdbcType=DOUBLE}, #{positionY,jdbcType=DOUBLE}, #{positionZ,jdbcType=DOUBLE},
      #{channel,jdbcType=INTEGER}, #{emissivePower,jdbcType=INTEGER}, #{antennaGain,jdbcType=INTEGER},
      #{encryption,jdbcType=INTEGER}, #{ssid,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER},
      #{subnetMask,jdbcType=VARCHAR}, #{zoneId,jdbcType=INTEGER}, #{areaId,jdbcType=INTEGER},
      #{baseStationName,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER}, #{frequency,jdbcType=DOUBLE}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.cst.xinhe.persistence.model.base_station.BaseStation">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into base_station
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="baseStationId != null">
        base_station_id,
      </if>
      <if test="baseStationNum != null">
        base_station_num,
      </if>
      <if test="baseStationIp != null">
        base_station_ip,
      </if>
      <if test="softwareVersion != null">
        software_version,
      </if>
      <if test="hardwareVersion != null">
        hardware_version,
      </if>
      <if test="powerSupply != null">
        power_supply,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="positionX != null">
        position_x,
      </if>
      <if test="positionY != null">
        position_y,
      </if>
      <if test="positionZ != null">
        position_z,
      </if>
      <if test="channel != null">
        channel,
      </if>
      <if test="emissivePower != null">
        emissive_power,
      </if>
      <if test="antennaGain != null">
        antenna_gain,
      </if>
      <if test="encryption != null">
        encryption,
      </if>
      <if test="ssid != null">
        SSID,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="subnetMask != null">
        subnet_mask,
      </if>
      <if test="zoneId != null">
        zone_id,
      </if>
      <if test="areaId != null">
        area_id,
      </if>
      <if test="baseStationName != null">
        base_station_name,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="frequency != null">
        frequency,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="baseStationId != null">
        #{baseStationId,jdbcType=INTEGER},
      </if>
      <if test="baseStationNum != null">
        #{baseStationNum,jdbcType=INTEGER},
      </if>
      <if test="baseStationIp != null">
        #{baseStationIp,jdbcType=VARCHAR},
      </if>
      <if test="softwareVersion != null">
        #{softwareVersion,jdbcType=VARCHAR},
      </if>
      <if test="hardwareVersion != null">
        #{hardwareVersion,jdbcType=VARCHAR},
      </if>
      <if test="powerSupply != null">
        #{powerSupply,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="positionX != null">
        #{positionX,jdbcType=DOUBLE},
      </if>
      <if test="positionY != null">
        #{positionY,jdbcType=DOUBLE},
      </if>
      <if test="positionZ != null">
        #{positionZ,jdbcType=DOUBLE},
      </if>
      <if test="channel != null">
        #{channel,jdbcType=INTEGER},
      </if>
      <if test="emissivePower != null">
        #{emissivePower,jdbcType=INTEGER},
      </if>
      <if test="antennaGain != null">
        #{antennaGain,jdbcType=INTEGER},
      </if>
      <if test="encryption != null">
        #{encryption,jdbcType=INTEGER},
      </if>
      <if test="ssid != null">
        #{ssid,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="subnetMask != null">
        #{subnetMask,jdbcType=VARCHAR},
      </if>
      <if test="zoneId != null">
        #{zoneId,jdbcType=INTEGER},
      </if>
      <if test="areaId != null">
        #{areaId,jdbcType=INTEGER},
      </if>
      <if test="baseStationName != null">
        #{baseStationName,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="frequency != null">
        #{frequency,jdbcType=DOUBLE},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.cst.xinhe.persistence.model.base_station.BaseStationExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from base_station
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update base_station
    <set>
      <if test="record.baseStationId != null">
        base_station_id = #{record.baseStationId,jdbcType=INTEGER},
      </if>
      <if test="record.baseStationNum != null">
        base_station_num = #{record.baseStationNum,jdbcType=INTEGER},
      </if>
      <if test="record.baseStationIp != null">
        base_station_ip = #{record.baseStationIp,jdbcType=VARCHAR},
      </if>
      <if test="record.softwareVersion != null">
        software_version = #{record.softwareVersion,jdbcType=VARCHAR},
      </if>
      <if test="record.hardwareVersion != null">
        hardware_version = #{record.hardwareVersion,jdbcType=VARCHAR},
      </if>
      <if test="record.powerSupply != null">
        power_supply = #{record.powerSupply,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.positionX != null">
        position_x = #{record.positionX,jdbcType=DOUBLE},
      </if>
      <if test="record.positionY != null">
        position_y = #{record.positionY,jdbcType=DOUBLE},
      </if>
      <if test="record.positionZ != null">
        position_z = #{record.positionZ,jdbcType=DOUBLE},
      </if>
      <if test="record.channel != null">
        channel = #{record.channel,jdbcType=INTEGER},
      </if>
      <if test="record.emissivePower != null">
        emissive_power = #{record.emissivePower,jdbcType=INTEGER},
      </if>
      <if test="record.antennaGain != null">
        antenna_gain = #{record.antennaGain,jdbcType=INTEGER},
      </if>
      <if test="record.encryption != null">
        encryption = #{record.encryption,jdbcType=INTEGER},
      </if>
      <if test="record.ssid != null">
        SSID = #{record.ssid,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.subnetMask != null">
        subnet_mask = #{record.subnetMask,jdbcType=VARCHAR},
      </if>
      <if test="record.zoneId != null">
        zone_id = #{record.zoneId,jdbcType=INTEGER},
      </if>
      <if test="record.areaId != null">
        area_id = #{record.areaId,jdbcType=INTEGER},
      </if>
      <if test="record.baseStationName != null">
        base_station_name = #{record.baseStationName,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.frequency != null">
        frequency = #{record.frequency,jdbcType=DOUBLE},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update base_station
    set base_station_id = #{record.baseStationId,jdbcType=INTEGER},
      base_station_num = #{record.baseStationNum,jdbcType=INTEGER},
      base_station_ip = #{record.baseStationIp,jdbcType=VARCHAR},
      software_version = #{record.softwareVersion,jdbcType=VARCHAR},
      hardware_version = #{record.hardwareVersion,jdbcType=VARCHAR},
      power_supply = #{record.powerSupply,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      remark = #{record.remark,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      position_x = #{record.positionX,jdbcType=DOUBLE},
      position_y = #{record.positionY,jdbcType=DOUBLE},
      position_z = #{record.positionZ,jdbcType=DOUBLE},
      channel = #{record.channel,jdbcType=INTEGER},
      emissive_power = #{record.emissivePower,jdbcType=INTEGER},
      antenna_gain = #{record.antennaGain,jdbcType=INTEGER},
      encryption = #{record.encryption,jdbcType=INTEGER},
      SSID = #{record.ssid,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=INTEGER},
      subnet_mask = #{record.subnetMask,jdbcType=VARCHAR},
      zone_id = #{record.zoneId,jdbcType=INTEGER},
      area_id = #{record.areaId,jdbcType=INTEGER},
      base_station_name = #{record.baseStationName,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=INTEGER},
      frequency = #{record.frequency,jdbcType=DOUBLE}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.cst.xinhe.persistence.model.base_station.BaseStation">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update base_station
    <set>
      <if test="baseStationNum != null">
        base_station_num = #{baseStationNum,jdbcType=INTEGER},
      </if>
      <if test="baseStationIp != null">
        base_station_ip = #{baseStationIp,jdbcType=VARCHAR},
      </if>
      <if test="softwareVersion != null">
        software_version = #{softwareVersion,jdbcType=VARCHAR},
      </if>
      <if test="hardwareVersion != null">
        hardware_version = #{hardwareVersion,jdbcType=VARCHAR},
      </if>
      <if test="powerSupply != null">
        power_supply = #{powerSupply,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="positionX != null">
        position_x = #{positionX,jdbcType=DOUBLE},
      </if>
      <if test="positionY != null">
        position_y = #{positionY,jdbcType=DOUBLE},
      </if>
      <if test="positionZ != null">
        position_z = #{positionZ,jdbcType=DOUBLE},
      </if>
      <if test="channel != null">
        channel = #{channel,jdbcType=INTEGER},
      </if>
      <if test="emissivePower != null">
        emissive_power = #{emissivePower,jdbcType=INTEGER},
      </if>
      <if test="antennaGain != null">
        antenna_gain = #{antennaGain,jdbcType=INTEGER},
      </if>
      <if test="encryption != null">
        encryption = #{encryption,jdbcType=INTEGER},
      </if>
      <if test="ssid != null">
        SSID = #{ssid,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="subnetMask != null">
        subnet_mask = #{subnetMask,jdbcType=VARCHAR},
      </if>
      <if test="zoneId != null">
        zone_id = #{zoneId,jdbcType=INTEGER},
      </if>
      <if test="areaId != null">
        area_id = #{areaId,jdbcType=INTEGER},
      </if>
      <if test="baseStationName != null">
        base_station_name = #{baseStationName,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="frequency != null">
        frequency = #{frequency,jdbcType=DOUBLE},
      </if>
    </set>
    where base_station_id = #{baseStationId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.cst.xinhe.persistence.model.base_station.BaseStation">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update base_station
    set base_station_num = #{baseStationNum,jdbcType=INTEGER},
      base_station_ip = #{baseStationIp,jdbcType=VARCHAR},
      software_version = #{softwareVersion,jdbcType=VARCHAR},
      hardware_version = #{hardwareVersion,jdbcType=VARCHAR},
      power_supply = #{powerSupply,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      remark = #{remark,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      position_x = #{positionX,jdbcType=DOUBLE},
      position_y = #{positionY,jdbcType=DOUBLE},
      position_z = #{positionZ,jdbcType=DOUBLE},
      channel = #{channel,jdbcType=INTEGER},
      emissive_power = #{emissivePower,jdbcType=INTEGER},
      antenna_gain = #{antennaGain,jdbcType=INTEGER},
      encryption = #{encryption,jdbcType=INTEGER},
      SSID = #{ssid,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      subnet_mask = #{subnetMask,jdbcType=VARCHAR},
      zone_id = #{zoneId,jdbcType=INTEGER},
      area_id = #{areaId,jdbcType=INTEGER},
      base_station_name = #{baseStationName,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      frequency = #{frequency,jdbcType=DOUBLE}
    where base_station_id = #{baseStationId,jdbcType=INTEGER}
  </update>

    <select id="selectBaseStationInfoByTime" parameterType="java.util.Date" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />,zone.zone_name,zone.zone_id,area.area_id,area.area_name
        FROM base_station LEFT JOIN zone ON base_station.zone_id = zone.zone_id LEFT JOIN area ON area.area_id =
        base_station.area_id
        <where>
            <if test="begin != null and begin neq '' ">
                create_time &gt;= #{begin}
            </if>
            <if test="end != null and end neq '' ">
                AND create_time &lt;= #{end}
            </if>
        </where>
    </select>
    <select id="selectAllBaseStationInfo" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />,zone.zone_name,zone.zone_id,area.area_id,area.area_name
        FROM base_station LEFT JOIN zone ON base_station.zone_id = zone.zone_id LEFT JOIN area ON area.area_id =
        base_station.area_id
    </select>

    <select id="selectBaseStationInfoByStartTime" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />,zone.zone_name,zone.zone_id,area.area_id,area.area_name
        FROM base_station LEFT JOIN zone ON base_station.zone_id = zone.zone_id LEFT JOIN area ON area.area_id =
        base_station.area_id
        <where>
            <if test="begin != null and begin neq '' ">
                create_time &gt;= #{begin}
            </if>
        </where>
    </select>
    <select id="selectBaseStationInfoByEndTime" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />,zone_name,zone.zone_id,base_station.area_id,area_name
        FROM base_station LEFT JOIN zone ON base_station.zone_id = zone.zone_id LEFT JOIN area ON area.area_id =
        base_station.area_id

        <where>
            <if test="end != null and end neq '' ">
                create_time &lt;= #{end}
            </if>
        </where>
    </select>

    <select id="selectBaseStationPositionInfo" resultType="java.util.HashMap">
    SELECT base_station_id,base_station_num,position_x,position_y,position_z,base_station_name
    FROM base_station
    WHERE status = 1
  </select>


    <select id="selectBaseStationPositionInfoNotUsed" resultType="java.util.HashMap">
    SELECT base_station_id,base_station_num
    FROM base_station
    WHERE status = 0
  </select>

    <select id="selectCountStationByBaseStationNum" parameterType="java.lang.Integer" resultType="boolean">
    SELECT COUNT(base_station_id)
    FROM base_station
    WHERE base_station_num = #{baseStationNum}
  </select>

    <select id="findAllStationByAreaId" resultMap="BaseResultMap">
        SELECT * FROM base_station
        <where>
            <if test="null neq areaId and '' neq areaId">
                area_id=#{areaId}
            </if>
        </where>
    </select>

    <select id="findBaseStationByNum" resultMap="BaseResultMap">
        SELECT * FROM base_station where base_station_num=#{stationId}
    </select>


    <update id="updateBaseStationByStationId" parameterType="com.cst.xinhe.persistence.model.base_station.BaseStation">
        UPDATE base_station
        SET position_x = null ,position_y = null, position_z = null ,status = #{status},update_time = #{updateTime}
        WHERE base_station_id = #{baseStationId}
    </update>

    <select id="selectBaseStationByZoneId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        SELECT *
        FROM base_station
        WHERE zone_id = #{zoneId}
    </select>

    <select id="selectBaseStationInfoByParams" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT base_station_id as baseStationId,
              a.base_station_num as baseStationNum,
               base_station_ip as baseStationIp,
        software_version as softwareVersion,
         hardware_version as hardwareVersion,
        power_supply as powerSupply,
         a.create_time as createTime,
         remark as remark,
         a.update_time AS updateTime,
          position_x as positionX,
           position_y as positionY,
           position_z as positionZ,
        channel as channel,
        emissive_power as emissivePower,
        antenna_gain as antennaGain,
        encryption as encryption,
         SSID as ssid,
         status as status,
          subnet_mask as subnetMask,
          base_station_name as baseStationName,
          a.zone_id as zoneId,
          standard_id AS standardId,
      frequency,
        type
        FROM base_station a
        LEFT JOIN station_standard_relation b ON a.base_station_num = b.base_station_num
        <where>
            <if test="zoneIds != null">
                AND a.zone_id in
                <foreach close=")" collection="zoneIds" index="index" item="item" open="(" separator=",">#{item}
                </foreach>
            </if>
            <!--&lt;if test="areaId != null and areaId != ''"&gt;
                AND base_station.area_id = #{areaId}
            &lt;/if&gt;-->
            <if test="startTime != null">
                AND a.create_time &gt;= #{startTime}
            </if>
            <if test="endTime != null">
                AND a.create_time &lt;= #{endTime}
            </if>
        </where>
    </select>

    <select id="selectZoneNameAreaNameByStationId" parameterType="java.lang.Integer" resultType="java.util.Map">
        SELECT zone_name,area_name,base_station.zone_id
        FROM base_station LEFT JOIN area ON area.area_id = base_station.area_id
        LEFT JOIN zone ON zone.zone_id = base_station.zone_id
        WHERE base_station_id = #{baseStationId}
    </select>
    <select id="findBaseStationByZoneIds" resultMap="BaseResultMap">
        SELECT * FROM base_station WHERE base_station.zone_id in
        <foreach close=")" collection="zoneIds" index="index" item="item" open="(" separator=",">#{item}</foreach>
    </select>

    <select id="selectStandardIdByStationNum" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT standard_id AS standardId
        FROM station_standard_relation
        <where>
            <if test="stationNum != null ">
                base_station_num = #{stationNum}
            </if>
        </where>
    </select>


    <select id="selectAllBaseStation" resultType="java.util.Map">
        SELECT base_station_num AS baseStationNum, base_station_name AS baseStationName,type
        FROM base_station
    </select>

    <select id="selectBaseStationByType" parameterType="java.lang.Integer" resultType="java.util.Map">
        SELECT base_station_num AS baseStationNum
        FROM base_station
        WHERE type = #{type}
    </select>

    <update id="updateBaseStationTypeByStationNum" parameterType="java.util.Map">
        UPDATE base_station
        SET type = #{type}
        WHERE base_station_num = #{num}
    </update>

    <select id="selectFrequencyByStationId" parameterType="java.lang.Integer" resultType="java.util.Map">
        SELECT frequency
        FROM base_station
        WHERE base_station_num = #{stationId}
    </select>

  <update id="modifyFrequency">
    UPDATE base_station
    SET frequency = #{frequency}
    WHERE base_station_num = #{stationId}
  </update>
  <update id="updateByStationNumSelective" parameterType="com.cst.xinhe.persistence.model.base_station.BaseStation">
    update base_station
    <set>
      <if test="baseStationNum != null">
        base_station_num = #{baseStationNum,jdbcType=INTEGER},
      </if>
      <if test="baseStationIp != null">
        base_station_ip = #{baseStationIp,jdbcType=VARCHAR},
      </if>
      <if test="softwareVersion != null">
        software_version = #{softwareVersion,jdbcType=VARCHAR},
      </if>
      <if test="hardwareVersion != null">
        hardware_version = #{hardwareVersion,jdbcType=VARCHAR},
      </if>
      <if test="powerSupply != null">
        power_supply = #{powerSupply,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="positionX != null">
        position_x = #{positionX,jdbcType=DOUBLE},
      </if>
      <if test="positionY != null">
        position_y = #{positionY,jdbcType=DOUBLE},
      </if>
      <if test="positionZ != null">
        position_z = #{positionZ,jdbcType=DOUBLE},
      </if>
      <if test="channel != null">
        channel = #{channel,jdbcType=INTEGER},
      </if>
      <if test="emissivePower != null">
        emissive_power = #{emissivePower,jdbcType=INTEGER},
      </if>
      <if test="antennaGain != null">
        antenna_gain = #{antennaGain,jdbcType=INTEGER},
      </if>
      <if test="encryption != null">
        encryption = #{encryption,jdbcType=INTEGER},
      </if>
      <if test="ssid != null">
        SSID = #{ssid,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="subnetMask != null">
        subnet_mask = #{subnetMask,jdbcType=VARCHAR},
      </if>
      <if test="zoneId != null">
        zone_id = #{zoneId,jdbcType=INTEGER},
      </if>
      <if test="areaId != null">
        area_id = #{areaId,jdbcType=INTEGER},
      </if>
      <if test="baseStationName != null">
        base_station_name = #{baseStationName,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="frequency != null">
        frequency = #{frequency,jdbcType=DOUBLE},
      </if>
    </set>
    where base_station_num = #{baseStationNum,jdbcType=INTEGER}
  </update>

  <select id="selectCountStationByTypeAndId" parameterType="java.lang.Integer" resultType="java.lang.Boolean">
    SELECT COUNT(1)
    FROM base_station
    WHERE type = #{type}
    AND base_station_num = #{stationNum}
  </select>
</mapper>
