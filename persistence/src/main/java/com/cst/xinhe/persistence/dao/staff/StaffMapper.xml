<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cst.xinhe.persistence.dao.staff.StaffMapper">
  <resultMap id="BaseResultMap" type="com.cst.xinhe.persistence.model.staff.Staff">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="staff_id" jdbcType="INTEGER" property="staffId" />
    <result column="staff_name" jdbcType="VARCHAR" property="staffName" />
    <result column="staff_sex" jdbcType="INTEGER" property="staffSex" />
    <result column="staff_birthday" jdbcType="DATE" property="staffBirthday" />
    <result column="staff_id_card" jdbcType="VARCHAR" property="staffIdCard" />
    <result column="staff_phone" jdbcType="VARCHAR" property="staffPhone" />
    <result column="staff_job_id" jdbcType="INTEGER" property="staffJobId" />
    <result column="is_person" jdbcType="INTEGER" property="isPerson" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="group_id" jdbcType="INTEGER" property="groupId" />
    <result column="staff_wedlock" jdbcType="VARCHAR" property="staffWedlock" />
    <result column="staff_number" jdbcType="VARCHAR" property="staffNumber" />
    <result column="staff_email" jdbcType="VARCHAR" property="staffEmail" />
    <result column="staff_type_id" jdbcType="INTEGER" property="staffTypeId" />
    <result column="staff_address" jdbcType="VARCHAR" property="staffAddress" />
    <result column="staff_native_place" jdbcType="VARCHAR" property="staffNativePlace" />
    <result column="attendance_station_id" jdbcType="INTEGER" property="attendanceStationId" />
    <result column="time_standard_id" jdbcType="INTEGER" property="timeStandardId" />
  </resultMap>

  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    staff.staff_id, staff_number, staff_name, staff_sex, staff_birthday, staff_id_card, staff_wedlock,
    staff_email, staff_address, staff_phone, staff_job_id, staff_native_place, staff_type_id,
    is_person, staff.create_time, group_id,attendance_station_id,time_standard_id
  </sql>
  <select id="selectByExample" parameterType="com.cst.xinhe.persistence.model.staff.StaffExample" resultMap="BaseResultMap" useCache="false">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from staff
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap" useCache="false">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <include refid="Base_Column_List" />
    from staff
    where staff_id = #{staffId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from staff
    where staff_id = #{staffId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.cst.xinhe.persistence.model.staff.StaffExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from staff
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.cst.xinhe.persistence.model.staff.Staff">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into staff (staff_id, staff_name, staff_sex,
      staff_birthday, staff_id_card, staff_phone,
      staff_job_id, is_person, create_time,
      group_id, staff_wedlock, staff_number,
      staff_email, staff_type_id, staff_address,
      staff_native_place, attendance_station_id,
      time_standard_id)
    values (#{staffId,jdbcType=INTEGER}, #{staffName,jdbcType=VARCHAR}, #{staffSex,jdbcType=INTEGER},
      #{staffBirthday,jdbcType=DATE}, #{staffIdCard,jdbcType=VARCHAR}, #{staffPhone,jdbcType=VARCHAR},
      #{staffJobId,jdbcType=INTEGER}, #{isPerson,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP},
      #{groupId,jdbcType=INTEGER}, #{staffWedlock,jdbcType=VARCHAR}, #{staffNumber,jdbcType=VARCHAR},
      #{staffEmail,jdbcType=VARCHAR}, #{staffTypeId,jdbcType=INTEGER}, #{staffAddress,jdbcType=VARCHAR},
      #{staffNativePlace,jdbcType=VARCHAR}, #{attendanceStationId,jdbcType=INTEGER},
      #{timeStandardId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.cst.xinhe.persistence.model.staff.Staff">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into staff
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="staffId != null">
        staff_id,
      </if>
      <if test="staffName != null">
        staff_name,
      </if>
      <if test="staffSex != null">
        staff_sex,
      </if>
      <if test="staffBirthday != null">
        staff_birthday,
      </if>
      <if test="staffIdCard != null">
        staff_id_card,
      </if>
      <if test="staffPhone != null">
        staff_phone,
      </if>
      <if test="staffJobId != null">
        staff_job_id,
      </if>
      <if test="isPerson != null">
        is_person,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="groupId != null">
        group_id,
      </if>
      <if test="staffWedlock != null">
        staff_wedlock,
      </if>
      <if test="staffNumber != null">
        staff_number,
      </if>
      <if test="staffEmail != null">
        staff_email,
      </if>
      <if test="staffTypeId != null">
        staff_type_id,
      </if>
      <if test="staffAddress != null">
        staff_address,
      </if>
      <if test="staffNativePlace != null">
        staff_native_place,
      </if>
      <if test="attendanceStationId != null">
        attendance_station_id,
      </if>
      <if test="timeStandardId != null">
        time_standard_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="staffId != null">
        #{staffId,jdbcType=INTEGER},
      </if>
      <if test="staffName != null">
        #{staffName,jdbcType=VARCHAR},
      </if>
      <if test="staffSex != null">
        #{staffSex,jdbcType=INTEGER},
      </if>
      <if test="staffBirthday != null">
        #{staffBirthday,jdbcType=DATE},
      </if>
      <if test="staffIdCard != null">
        #{staffIdCard,jdbcType=VARCHAR},
      </if>
      <if test="staffPhone != null">
        #{staffPhone,jdbcType=VARCHAR},
      </if>
      <if test="staffJobId != null">
        #{staffJobId,jdbcType=INTEGER},
      </if>
      <if test="isPerson != null">
        #{isPerson,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="groupId != null">
        #{groupId,jdbcType=INTEGER},
      </if>
      <if test="staffWedlock != null">
        #{staffWedlock,jdbcType=VARCHAR},
      </if>
      <if test="staffNumber != null">
        #{staffNumber,jdbcType=VARCHAR},
      </if>
      <if test="staffEmail != null">
        #{staffEmail,jdbcType=VARCHAR},
      </if>
      <if test="staffTypeId != null">
        #{staffTypeId,jdbcType=INTEGER},
      </if>
      <if test="staffAddress != null">
        #{staffAddress,jdbcType=VARCHAR},
      </if>
      <if test="staffNativePlace != null">
        #{staffNativePlace,jdbcType=VARCHAR},
      </if>
      <if test="attendanceStationId != null">
        #{attendanceStationId,jdbcType=INTEGER},
      </if>
      <if test="timeStandardId != null">
        #{timeStandardId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.cst.xinhe.persistence.model.staff.StaffExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from staff
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update staff
    <set>
      <if test="record.staffId != null">
        staff_id = #{record.staffId,jdbcType=INTEGER},
      </if>
      <if test="record.staffName != null">
        staff_name = #{record.staffName,jdbcType=VARCHAR},
      </if>
      <if test="record.staffSex != null">
        staff_sex = #{record.staffSex,jdbcType=INTEGER},
      </if>
      <if test="record.staffBirthday != null">
        staff_birthday = #{record.staffBirthday,jdbcType=DATE},
      </if>
      <if test="record.staffIdCard != null">
        staff_id_card = #{record.staffIdCard,jdbcType=VARCHAR},
      </if>
      <if test="record.staffPhone != null">
        staff_phone = #{record.staffPhone,jdbcType=VARCHAR},
      </if>
      <if test="record.staffJobId != null">
        staff_job_id = #{record.staffJobId,jdbcType=INTEGER},
      </if>
      <if test="record.isPerson != null">
        is_person = #{record.isPerson,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.groupId != null">
        group_id = #{record.groupId,jdbcType=INTEGER},
      </if>
      <if test="record.staffWedlock != null">
        staff_wedlock = #{record.staffWedlock,jdbcType=VARCHAR},
      </if>
      <if test="record.staffNumber != null">
        staff_number = #{record.staffNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.staffEmail != null">
        staff_email = #{record.staffEmail,jdbcType=VARCHAR},
      </if>
      <if test="record.staffTypeId != null">
        staff_type_id = #{record.staffTypeId,jdbcType=INTEGER},
      </if>
      <if test="record.staffAddress != null">
        staff_address = #{record.staffAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.staffNativePlace != null">
        staff_native_place = #{record.staffNativePlace,jdbcType=VARCHAR},
      </if>
      <if test="record.attendanceStationId != null">
        attendance_station_id = #{record.attendanceStationId,jdbcType=INTEGER},
      </if>
      <if test="record.timeStandardId != null">
        time_standard_id = #{record.timeStandardId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update staff
    set staff_id = #{record.staffId,jdbcType=INTEGER},
      staff_name = #{record.staffName,jdbcType=VARCHAR},
      staff_sex = #{record.staffSex,jdbcType=INTEGER},
      staff_birthday = #{record.staffBirthday,jdbcType=DATE},
      staff_id_card = #{record.staffIdCard,jdbcType=VARCHAR},
      staff_phone = #{record.staffPhone,jdbcType=VARCHAR},
      staff_job_id = #{record.staffJobId,jdbcType=INTEGER},
      is_person = #{record.isPerson,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      group_id = #{record.groupId,jdbcType=INTEGER},
      staff_wedlock = #{record.staffWedlock,jdbcType=VARCHAR},
      staff_number = #{record.staffNumber,jdbcType=VARCHAR},
      staff_email = #{record.staffEmail,jdbcType=VARCHAR},
      staff_type_id = #{record.staffTypeId,jdbcType=INTEGER},
      staff_address = #{record.staffAddress,jdbcType=VARCHAR},
      staff_native_place = #{record.staffNativePlace,jdbcType=VARCHAR},
      attendance_station_id = #{record.attendanceStationId,jdbcType=INTEGER},
      time_standard_id = #{record.timeStandardId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.cst.xinhe.persistence.model.staff.Staff">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update staff
    <set>
      <if test="staffNumber != null">
        staff_number = #{staffNumber,jdbcType=VARCHAR},
      </if>
      <if test="staffName != null">
        staff_name = #{staffName,jdbcType=VARCHAR},
      </if>
      <if test="staffSex != null">
        staff_sex = #{staffSex,jdbcType=BIT},
      </if>
      <if test="staffBirthday != null">
        staff_birthday = #{staffBirthday,jdbcType=DATE},
      </if>
      <if test="staffIdCard != null">
        staff_id_card = #{staffIdCard,jdbcType=VARCHAR},
      </if>
      <if test="staffWedlock != null">
        staff_wedlock = #{staffWedlock,jdbcType=VARCHAR},
      </if>
      <if test="staffEmail != null">
        staff_email = #{staffEmail,jdbcType=VARCHAR},
      </if>
      <if test="staffAddress != null">
        staff_address = #{staffAddress,jdbcType=VARCHAR},
      </if>
      <if test="staffPhone != null">
        staff_phone = #{staffPhone,jdbcType=VARCHAR},
      </if>
      <if test="staffJobId != null">
        staff_job_id = #{staffJobId,jdbcType=INTEGER},
      </if>
      <if test="staffNativePlace != null">
        staff_native_place = #{staffNativePlace,jdbcType=VARCHAR},
      </if>
      <if test="staffTypeId != null">
        staff_type_id = #{staffTypeId,jdbcType=INTEGER},
      </if>
      <if test="isPerson != null">
        is_person = #{isPerson,jdbcType=BIT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="groupId != null">
        group_id = #{groupId,jdbcType=INTEGER},
      </if>
      <if test="attendanceStationId != null">
        attendance_station_id = #{attendanceStationId,jdbcType=INTEGER}
      </if>
      <if test="timeStandardId != null">
        time_standard_id = #{timeStandardId,jdbcType=INTEGER}
      </if>
    </set>
    where staff_id = #{staffId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.cst.xinhe.persistence.model.staff.Staff">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update staff
    set staff_number = #{staffNumber,jdbcType=VARCHAR},
    staff_name = #{staffName,jdbcType=VARCHAR},
    staff_sex = #{staffSex,jdbcType=BIT},
    staff_birthday = #{staffBirthday,jdbcType=DATE},
    staff_id_card = #{staffIdCard,jdbcType=VARCHAR},
    staff_wedlock = #{staffWedlock,jdbcType=VARCHAR},
    staff_email = #{staffEmail,jdbcType=VARCHAR},
    staff_address = #{staffAddress,jdbcType=VARCHAR},
    staff_phone = #{staffPhone,jdbcType=VARCHAR},
    staff_job_id = #{staffJobId,jdbcType=INTEGER},
    staff_native_place = #{staffNativePlace,jdbcType=VARCHAR},
    staff_type_id = #{staffTypeId,jdbcType=INTEGER},
    is_person = #{isPerson,jdbcType=BIT},
    create_time = #{createTime,jdbcType=TIMESTAMP},
    group_id = #{groupId,jdbcType=INTEGER},
    attendance_station_id = #{attendanceStationId,jdbcType=INTEGER},
    time_standard_id = #{timeStandardId,jdbcType=INTEGER}
    where staff_id = #{staffId,jdbcType=INTEGER}
  </update>
  <resultMap id="rM" type="com.cst.xinhe.persistence.dto.staff.StaffDto">
    <id column="staff_id" jdbcType="INTEGER" property="staffId"/>
    <result column="staff_number" jdbcType="VARCHAR" property="staffNumber"/>
    <result column="staff_name" jdbcType="VARCHAR" property="staffName"/>
  </resultMap>
  <select id="selectStaffsByGroupId" resultMap="rM" parameterType="java.lang.Integer">
        SELECT staff_id,staff_name,staff_number
        FROM staff
        WHERE group_id = #{groupId}
    </select>

  <resultMap id="staffMap" type="com.cst.xinhe.persistence.dto.staff.StaffInfoDto">
    <id column="staff_id" jdbcType="INTEGER" property="staffId"/>
    <result column="staff_number" jdbcType="VARCHAR" property="staffNumber"/>
    <result column="staff_name" jdbcType="VARCHAR" property="staffName"/>
    <result column="job_name" jdbcType="VARCHAR" property="jobName"/>
    <result column="staff_phone" jdbcType="VARCHAR" property="staffPhone"/>
    <result column="staff_job_id" jdbcType="INTEGER" property="staffJobId"/>
    <result column="is_person" jdbcType="BIT" property="isPerson"/>
    <result column="group_id" jdbcType="INTEGER" property="groupId"/>
    <result column="job_id" jdbcType="INTEGER" property="jobId"/>
    <result column="staff_sex" jdbcType="INTEGER" property="staffSex"/>
    <result column="dept_id" jdbcType="INTEGER" property="deptId"/>
    <result column="terminal_id" jdbcType="INTEGER" property="terminalId"/>
    <result column="staff_birthday" jdbcType="TIMESTAMP" property="staffBirthday"/>
    <result column="staff_id_card" jdbcType="VARCHAR" property="staffIdCard"/>
    <result column="group_name" jdbcType="VARCHAR" property="groupName"/>
    <result column="dept_name" jdbcType="VARCHAR" property="deptName"/>
    <result column="staff_id_card" jdbcType="VARCHAR" property="staffIdCard"/>
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    <result column="attendance_station_id" jdbcType="INTEGER" property="attendanceStationId"/>
    <result column="time_standard_id" jdbcType="INTEGER" property="timeStandardId"/>
    <result column="base_station_name" jdbcType="VARCHAR" property="baseStationName"/>


    <!--<association property="staffGroupDto" select="com.cst.xinhe.persistence.dao.staff.StaffGroupMapper.selectGroupDtoByGroupId"-->
    <!--fetchType="lazy"-->
    <!--column="group_id" javaType="com.cst.xinhe.persistence.dto.staff.StaffGroupDto">-->
    <!--<id column="group_id" jdbcType="INTEGER" property="groupId"/>-->
    <!--<result column="group_name" jdbcType="VARCHAR" property="groupName"/>-->
    <!--<result column="dept_id" jdbcType="INTEGER" property="deptId"/>-->
    <!--</association>-->
    <!--<association property="staffJob" select="com.cst.xinhe.persistence.dao.staff.StaffGroupMapper.selectGroupDtoByGroupId"-->
    <!--fetchType="lazy"-->
    <!--column="group_id" javaType="com.cst.xinhe.persistence.dto.staff.StaffGroupDto">-->
    <!--<id column="group_id" jdbcType="INTEGER" property="groupId"/>-->
    <!--<result column="group_name" jdbcType="VARCHAR" property="groupName"/>-->
    <!--</association>-->

  </resultMap>
    <select id="selectStaffByParams" parameterType="com.cst.xinhe.persistence.model.staff.Staff" resultMap="staffMap">
        SELECT
        a.staff_id,a.staff_name,a.staff_number,a.create_time,a.staff_birthday,a.staff_id_card,a.staff_sex,
        a.staff_phone,a.group_id,a.is_person,c.terminal_id,a.staff_job_id AS
        job_id,job_name,base_station.base_station_name
        FROM staff a LEFT JOIN staff_job b ON a.staff_job_id = b.job_id  LEFT JOIN staff_terminal c ON a.staff_id =
        c.staff_id LEFT JOIN base_station ON base_station.base_station_num = a.attendance_station_id
        <where>
            <if test="staffName != null and staffName neq '' and staffName neq null ">
              AND  staff_name LIKE CONCAT('%',#{staffName},'%')
            </if>
            <if test="orgList != null ">
                AND a.group_id IN
                <foreach close=")" collection="orgList" index="index" item="item" open="(" separator=",">
                    #{item}
                </foreach>
            </if>
          <if test="isPerson != null and isPerson == 3">
            AND  a.is_person = 3
          </if>
          <if test="isPerson != null and isPerson == 1">
            AND  a.is_person = 1
          </if>
          <if test="isPerson != null and isPerson == 2">
            AND  a.is_person = 2
          </if>
          <if test="isPerson != null and isPerson == 0">
            AND   <![CDATA[  is_person <> 3   ]]>
          </if>
        </where>
    </select>

  <select id="selectGroupAndDeptByStaffId" parameterType="java.lang.Integer" resultType="java.util.Map" useCache="false">
        SELECT dept_name,group_name
        FROM staff INNER JOIN staff_group ON staff.group_id = staff_group.group_id
        INNER JOIN staff_dept ON staff_dept.dept_id = staff_group.dept_id
        WHERE staff_id = #{staffId}
  </select>

  <select id="selectStaffInfoByTerminalId" resultType="java.util.Map" parameterType="java.lang.Integer" useCache="false">
      SELECT
    <include refid="Base_Column_List"/>
    FROM staff LEFT JOIN staff_terminal ON staff.staff_id = staff_terminal.staff_id
    WHERE terminal_id = #{terminalId}
  </select>

  <select id="getDeptAndGroupNameByStaffId" resultType="java.util.Map" parameterType="java.lang.Integer" useCache="false">
        SELECT s.staff_name as staffName,s.group_id as groupId
        FROM staff s
        WHERE staff_id = #{staffId}
    </select>

  <select id="selectStaffInfoByParamsOfMap" parameterType="java.util.HashMap" resultType="java.util.HashMap" useCache="false">
    SELECT staff_id AS staffId, staff_name AS staffName, staff_organization.id as deptId
    FROM staff LEFT JOIN staff_organization ON staff.group_id = staff_organization.id
    <where>
      <if test="deptId != null and deptId neq ''">
        AND staff_dept.dept_id = #{deptId}
      </if>
      <if test="staffName != null and staffName neq ''">
        AND staff.staff_name LIKE CONCAT('%', #{staffName}, '%')
      </if>
      <if test="staffId != null and staffId neq ''">
        AND staff.staff_id = #{staffId}
      </if>
    </where>
    ORDER BY CONVERT(staff.staff_name USING gbk) ASC
  </select>
  <!--设置GBK编码 按一级汉字 a-z 升序排序-->

  <select id="selectStaffsByDeptId" parameterType="java.lang.Integer" resultType="java.lang.Integer" useCache="false">
       SELECT staff_id FROM staff INNER JOIN staff_group
        ON staff.group_id = staff_group.group_id AND staff_group.dept_id  = #{deptId}
    </select>

  <select id="selectStaffIdsByGroupId" parameterType="java.lang.Integer" resultType="java.lang.Integer" useCache="false">
        SELECT staff_id FROM staff
        WHERE group_id = #{groupId}
    </select>

  <select id="selectStaffAttendanceRules" resultType="java.util.Map">
        SELECT staff_id AS staffId, time_standard.start_time AS startTime, time_standard.end_time AS endTime
        FROM staff INNER JOIN time_standard ON staff.time_standard_id = time_standard.time_standard_id
    </select>

  <select id="selectStaffNameById" parameterType="java.lang.Integer" resultType="java.lang.String" useCache="false">
    SELECT staff_name AS staffName
    FROM staff
    WHERE staff_id = #{staffId}
  </select>

  <select id="selectStaffNumberById" parameterType="java.lang.Integer" resultType="java.lang.String" useCache="false">
     SELECT staff_number AS staffNumber
    FROM staff
    WHERE staff_id = #{staffId}
  </select>

  <select id="selectStaffIdByName" parameterType="java.lang.String" resultType="java.lang.Integer" useCache="false">
    SELECT staff_id AS staffId
    FROM staff
    WHERE staff_name LIKE  CONCAT('%', #{staffName}, '%')
  </select>

  <insert id="insertStaffs" parameterType="java.util.List" >
    INSERT INTO staff (staff_name, staff_sex, staff_birthday, staff_id_card, staff_phone, staff_job_id, is_person, create_time, group_id)
    VALUES

    <foreach collection="list" item="item" index="index" separator=",">
      (#{item.staffName}, #{item.staffSex},#{item.staffBirthday},#{item.staffIdCard},#{item.staffPhone},#{item.jobId},
      #{item.isPerson},#{item.createTime},#{item.groupId})
    </foreach>
  </insert>
</mapper>
