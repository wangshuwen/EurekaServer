<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cst.xinhe.persistence.dao.attendance.StaffAttendanceRealRuleMapper">
  <cache eviction="LRU" flushInterval="100000" size="1024" readOnly="true"/>
  <resultMap id="BaseResultMap" type="com.cst.xinhe.persistence.model.attendance.StaffAttendanceRealRule">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="staff_id" jdbcType="INTEGER" property="staffId" />
    <result column="real_rule_start_time" jdbcType="TIMESTAMP" property="realRuleStartTime" />
    <result column="real_rule_end_time" jdbcType="TIMESTAMP" property="realRuleEndTime" />
    <result column="is_over_time" jdbcType="INTEGER" property="isOverTime" />
    <result column="is_serious_time" jdbcType="INTEGER" property="isSeriousTime" />
    <result column="final_time" jdbcType="TIMESTAMP" property="finalTime" />
    <result column="is_attendance" jdbcType="INTEGER" property="isAttendance" />
  </resultMap>
  <!--<cache type="com.cst.xinhe.persistence.cache.MybatisRedisCache">-->
    <!--<property name="eviction" value="LRU" />-->
    <!--<property name="flushInterval" value="6000000" />-->
    <!--<property name="size" value="1024" />-->
    <!--<property name="readOnly" value="true" />-->
    <!--<property name="cacheEnabled" value="false"/>-->
  <!--</cache>-->
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    staff_id, real_rule_start_time, real_rule_end_time, is_over_time, is_serious_time,
    final_time, is_attendance
  </sql>
  <select id="selectByExample" parameterType="com.cst.xinhe.persistence.model.attendance.StaffAttendanceRealRuleExample" resultMap="BaseResultMap" useCache="true">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from staff_attendance_real_rule
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap" useCache="true">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <include refid="Base_Column_List" />
    from staff_attendance_real_rule
    where staff_id = #{staffId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from staff_attendance_real_rule
    where staff_id = #{staffId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.cst.xinhe.persistence.model.attendance.StaffAttendanceRealRuleExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from staff_attendance_real_rule
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.cst.xinhe.persistence.model.attendance.StaffAttendanceRealRule">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into staff_attendance_real_rule (staff_id, real_rule_start_time, real_rule_end_time,
      is_over_time, is_serious_time, final_time,
      is_attendance)
    values (#{staffId,jdbcType=INTEGER}, #{realRuleStartTime,jdbcType=TIMESTAMP}, #{realRuleEndTime,jdbcType=TIMESTAMP},
      #{isOverTime,jdbcType=INTEGER}, #{isSeriousTime,jdbcType=INTEGER}, #{finalTime,jdbcType=TIMESTAMP},
      #{isAttendance,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.cst.xinhe.persistence.model.attendance.StaffAttendanceRealRule">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into staff_attendance_real_rule
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="staffId != null">
        staff_id,
      </if>
      <if test="realRuleStartTime != null">
        real_rule_start_time,
      </if>
      <if test="realRuleEndTime != null">
        real_rule_end_time,
      </if>
      <if test="isOverTime != null">
        is_over_time,
      </if>
      <if test="isSeriousTime != null">
        is_serious_time,
      </if>
      <if test="finalTime != null">
        final_time,
      </if>
      <if test="isAttendance != null">
        is_attendance,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="staffId != null">
        #{staffId,jdbcType=INTEGER},
      </if>
      <if test="realRuleStartTime != null">
        #{realRuleStartTime,jdbcType=TIMESTAMP},
      </if>
      <if test="realRuleEndTime != null">
        #{realRuleEndTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isOverTime != null">
        #{isOverTime,jdbcType=INTEGER},
      </if>
      <if test="isSeriousTime != null">
        #{isSeriousTime,jdbcType=INTEGER},
      </if>
      <if test="finalTime != null">
        #{finalTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isAttendance != null">
        #{isAttendance,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.cst.xinhe.persistence.model.attendance.StaffAttendanceRealRuleExample" resultType="java.lang.Long" useCache="true">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from staff_attendance_real_rule
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update staff_attendance_real_rule
    <set>
      <if test="record.staffId != null">
        staff_id = #{record.staffId,jdbcType=INTEGER},
      </if>
      <if test="record.realRuleStartTime != null">
        real_rule_start_time = #{record.realRuleStartTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.realRuleEndTime != null">
        real_rule_end_time = #{record.realRuleEndTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isOverTime != null">
        is_over_time = #{record.isOverTime,jdbcType=INTEGER},
      </if>
      <if test="record.isSeriousTime != null">
        is_serious_time = #{record.isSeriousTime,jdbcType=INTEGER},
      </if>
      <if test="record.finalTime != null">
        final_time = #{record.finalTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isAttendance != null">
        is_attendance = #{record.isAttendance,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update staff_attendance_real_rule
    set staff_id = #{record.staffId,jdbcType=INTEGER},
      real_rule_start_time = #{record.realRuleStartTime,jdbcType=TIMESTAMP},
      real_rule_end_time = #{record.realRuleEndTime,jdbcType=TIMESTAMP},
      is_over_time = #{record.isOverTime,jdbcType=INTEGER},
      is_serious_time = #{record.isSeriousTime,jdbcType=INTEGER},
      final_time = #{record.finalTime,jdbcType=TIMESTAMP},
      is_attendance = #{record.isAttendance,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.cst.xinhe.persistence.model.attendance.StaffAttendanceRealRule">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update staff_attendance_real_rule
    <set>
      <if test="realRuleStartTime != null">
        real_rule_start_time = #{realRuleStartTime,jdbcType=TIMESTAMP},
      </if>
      <if test="realRuleEndTime != null">
        real_rule_end_time = #{realRuleEndTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isOverTime != null">
        is_over_time = #{isOverTime,jdbcType=INTEGER},
      </if>
      <if test="isSeriousTime != null">
        is_serious_time = #{isSeriousTime,jdbcType=INTEGER},
      </if>
      <if test="finalTime != null">
        final_time = #{finalTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isAttendance != null">
        is_attendance = #{isAttendance,jdbcType=INTEGER},
      </if>
    </set>
    where staff_id = #{staffId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.cst.xinhe.persistence.model.attendance.StaffAttendanceRealRule">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update staff_attendance_real_rule
    set real_rule_start_time = #{realRuleStartTime,jdbcType=TIMESTAMP},
      real_rule_end_time = #{realRuleEndTime,jdbcType=TIMESTAMP},
      is_over_time = #{isOverTime,jdbcType=INTEGER},
      is_serious_time = #{isSeriousTime,jdbcType=INTEGER},
      final_time = #{finalTime,jdbcType=TIMESTAMP},
      is_attendance = #{isAttendance,jdbcType=INTEGER}
    where staff_id = #{staffId,jdbcType=INTEGER}
  </update>

  <select id="getAttendanceStaff" resultType="java.util.HashMap" useCache="false">
    select s.staff_id as staffId,s.staff_name as staffName,r.final_time as finalTime,s.group_id as groupId
    from staff_attendance_real_rule r left join  staff s
    on r.staff_id=s.staff_id
    <where>
      r.is_attendance=1
      <if test="deptIds != null and deptIds.size()!=0">
        And s.group_id in
        <foreach  item="item" collection="deptIds" index="index"  open="(" separator="," close=")">#{item}</foreach>
      </if>
      <if test="staffName != null and staffName != ''">
        AND s.staff_name LIKE CONCAT ( '%', #{staffName}, '%' )
      </if>
    </where>

  </select>
  <select id="getAttendanceStaffCount" resultType="java.lang.Long" useCache="false">
    select COUNT(*)
    from staff_attendance_real_rule r left join  staff s
    on r.staff_id=s.staff_id
    <where>
      r.is_attendance=1
      <if test="deptIds != null and deptIds.size()!=0">
        And s.group_id in
        <foreach  item="item" collection="deptIds" index="index"  open="(" separator="," close=")">#{item}</foreach>
      </if>
      <if test="staffName != null and staffName != ''">
        AND s.staff_name LIKE CONCAT ( '%', #{staffName}, '%' )
      </if>
    </where>

  </select>
  <select id="getUnAttendanceStaff" resultType="java.util.HashMap" useCache="false">
    select s.staff_id as staffId,s.staff_name as staffName,r.final_time as finalTime,s.group_id as groupId
    from staff_attendance_real_rule r left join  staff s
    on r.staff_id=s.staff_id
    <where>
      (r.is_attendance=0 or r.is_attendance is null)  and  #{nowDate} between r.real_rule_start_time and r.real_rule_end_time

      <if test="deptIds != null and deptIds.size()!=0">
        And s.group_id in
        <foreach  item="item" collection="deptIds" index="index"  open="(" separator="," close=")">#{item}</foreach>
      </if>
      <if test="staffName != null and staffName != ''">
        AND s.staff_name LIKE CONCAT ( '%', #{staffName}, '%' )
      </if>
    </where>
  </select>
  <select id="getOverTimeStaff" resultType="java.util.HashMap" useCache="false">
    select s.staff_id as staffId,s.staff_name as staffName,r.final_time as finalTime,s.group_id as groupId
    from staff_attendance_real_rule r left join  staff s
    on r.staff_id=s.staff_id
    <where>
      r.is_over_time=1 or r.is_serious_time=1

      <if test="deptIds != null and deptIds.size()!=0">
        And s.group_id in
        <foreach  item="item" collection="deptIds" index="index"  open="(" separator="," close=")">#{item}</foreach>
      </if>
      <if test="staffName != null and staffName != ''">
        AND s.staff_name LIKE CONCAT ( '%', #{staffName}, '%' )
      </if>
    </where>
  </select>
  <select id="getSeriousTimeStaff" resultType="java.util.HashMap" useCache="false">
    select s.staff_id as staffId,s.staff_name as staffName,r.final_time as finalTime,s.group_id as groupId
    from staff_attendance_real_rule r left join  staff s
    on r.staff_id=s.staff_id
    <where>
      r.is_serious_time=1
      <if test="deptIds != null and deptIds.size()!=0">
        And s.group_id in
        <foreach  item="item" collection="deptIds" index="index"  open="(" separator="," close=")">#{item}</foreach>
      </if>
      <if test="staffName != null and staffName != ''">
        AND s.staff_name LIKE CONCAT ( '%', #{staffName}, '%' )
      </if>
    </where>
  </select>

  <select id="getAttendanceDept" resultType="java.lang.Integer" useCache="false">
    select count(*)
    from staff_attendance_real_rule r left join  staff s
    on r.staff_id=s.staff_id
    <where>
      r.is_attendance=1
      <if test="deptIds != null and deptIds.size()!=0">
        And s.group_id in
        <foreach  item="item" collection="deptIds" index="index"  open="(" separator="," close=")">#{item}</foreach>
      </if>
    </where>
  </select>


  <select id="getUnAttendanceDept" resultType="java.lang.Integer" useCache="false">
    select count(*)
    from staff_attendance_real_rule r left join  staff s
    on r.staff_id=s.staff_id
    <where>
      (r.is_attendance=0  or r.is_attendance is null)  and  #{nowDate} between r.real_rule_start_time and r.real_rule_end_time

      <if test="deptIds != null and deptIds.size()!=0">
        And s.group_id in
        <foreach  item="item" collection="deptIds" index="index"  open="(" separator="," close=")">#{item}</foreach>
      </if>
    </where>
  </select>

  <select id="getOverTimeDept" resultType="java.lang.Integer" useCache="false">
    select count(*)
    from staff_attendance_real_rule r left join  staff s
    on r.staff_id=s.staff_id
    <where>
      r.is_over_time=1  or   r.is_serious_time=1

      <if test="deptIds != null and deptIds.size()!=0">
        And s.group_id in
        <foreach  item="item" collection="deptIds" index="index"  open="(" separator="," close=")">#{item}</foreach>
      </if>
    </where>
  </select>

  <select id="getSeriousTimeDept" resultType="java.lang.Integer" useCache="false">
    select count(*)
    from staff_attendance_real_rule r left join  staff s
    on r.staff_id=s.staff_id
    <where>
      r.is_serious_time=1
      <if test="deptIds != null and deptIds.size()!=0">
        And s.group_id in
        <foreach  item="item" collection="deptIds" index="index"  open="(" separator="," close=")">#{item}</foreach>
      </if>
    </where>
  </select>



</mapper>
