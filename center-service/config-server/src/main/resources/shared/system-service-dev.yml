management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: ALWAYS
server:
  port: 8778
rangBasePath: D:/idea/ideaProject/vue2/
spring:
  elasticsearch:
    rest:
      uris: ["http://192.168.1.182:9200"]
  boot:
    admin:
      client:
        url: http://127.0.0.1:5000
  #配置redis数据库
  redis:
    database: 15
    host: 192.168.1.182
    port: 6379
    #    password: root
    timeout: 50000
    jedis:
      pool:
        #连接池最大连接数（使用负值表示没有限制）
        max-active: 5000
        # 连接池中的最大空闲连接
        max-idle: 500
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: 5000
        # 连接池中的最小空闲连接
        min-idle: 200
  application:
    name: system-service
  datasource:
    # 使用阿里的Druid连接池
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.jdbc.Driver
    # 填写你数据库的url、登录名、密码和数据库名
    url: jdbc:mysql://192.168.1.108:8066/TESTDB?useSSL=false&characterEncoding=utf8
    username: root
    password: 123456
    druid:
      # 连接池的配置信息
      # 初始化大小，最小，最大
      initial-size: 5
      min-idle: 5
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 1 FROM DUAL
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000
      # 配置DruidStatFilter
      web-stat-filter:
        enabled: true
        url-pattern: "/*"
        exclusions: "*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*"
      # 配置DruidStatViewServlet
      stat-view-servlet:
        url-pattern: "/druid/*"
        # IP白名单(没有配置或者为空，则允许所有访问)
        #        allow: 127.0.0.1,192.168.1.50
        # IP黑名单 (存在共同时，deny优先于allow)
        #        deny: 192.168.1.73
        #  禁用HTML页面上的“Reset All”功能
        reset-enable: false
        # 登录名
        login-username: admin
        # 登录密码
        login-password: 123456
eureka:
  instance:
    lease-expiration-duration-in-seconds: 2   #告诉服务端，如果我2s之内没有给你发心跳，就代表我“死”了，将我踢出掉。
    lease-renewal-interval-in-seconds: 1     #每间隔1s，向服务端发送一次心跳，证明自己依然”存活“
    health-check-url-path: /actuator/health
  client:
    service-url:
      defaultZone: http://127.0.0.1:8761/eureka/
ribbon:
  ReadTimeout: 3500 #请求处理的超时时间
  ConnectTimeout: 1000 #请求连接的超时时间
  OkToRetryOnAllOperations: false # 对所有的操作请求都进行重试，如果是get则可以，如果是post,put等操作没有实现幂等的情况下是很危险的，所以设置为false
  SocketTimeout: 3500
  MaxAutoRetries: 1 #最大重试次数，当Eureka中可以找到服务，但是服务连不上时将会重试
  MaxAutoRetriesNextServer: 1  #切换实例的重试次数
  eureka:
    enabled: true
#线程策略
hystrix:
  command:
    default:
      execution:
        timeout:
          enabled: true
          #        isolation:
          #          strategy: SEMAPHORE
          #          semaphore:
          #            maxConcurrentRequests: 500
          thread:
            timeoutInMilliseconds: 20000
feign:
  compression:
    request:
      enabled: true
      mime-types: text/html,application/xml,application/json
      min-request-size: 2048
    response:
      enabled: true
  hystrix:
    enabled: true
  httpclient:
    enabled: true
    max-connections: 200
    max-connections-per-route: 50
mybatis:
  mapper-locations: com/cst/xinhe/persistence/dao/*/*.xml
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    cache-enabled: false
    default-statement-timeout: 3000
#  type-aliases-package: com.cst.xinhe.persistence.model
pagehelper:
  helper-dialect: mysql
  reasonable: true
  support-methods-arguments: count=countSql
#打印日志
logging:
  level:
    #org.springframework.web: DEBUG
    com.cst.xinhe.persistence.dao: DEBUG
  config: classpath:logback-boot.xml
#单位小时
redis:
  expireTime: 12
