<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cst.xinhe.persistence.dao.lack_electric.LackElectricMapper">
  <resultMap id="BaseResultMap" type="com.cst.xinhe.persistence.model.lack_electric.LackElectric">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="lack_electric_id" jdbcType="INTEGER" property="lackElectricId" />
    <result column="upload_id" jdbcType="INTEGER" property="uploadId" />
    <result column="upload_time" jdbcType="TIMESTAMP" property="uploadTime" />
    <result column="electric_value" jdbcType="INTEGER" property="electricValue" />
    <result column="lack_type" jdbcType="INTEGER" property="lackType" />
    <result column="is_read" jdbcType="INTEGER" property="isRead" />
  </resultMap>
  <!--<cache type="com.cst.xinhe.persistence.cache.MybatisRedisCache">-->
    <!--<property name="eviction" value="LRU" />-->
    <!--<property name="flushInterval" value="6000000" />-->
    <!--<property name="size" value="1024" />-->
    <!--<property name="readOnly" value="true" />-->
  <!--</cache>-->
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    lack_electric_id, upload_id, upload_time, electric_value, lack_type, is_read
  </sql>
  <select id="selectByExample" parameterType="com.cst.xinhe.persistence.model.lack_electric.LackElectricExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from lack_electric
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <include refid="Base_Column_List" />
    from lack_electric
    where lack_electric_id = #{lackElectricId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from lack_electric
    where lack_electric_id = #{lackElectricId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.cst.xinhe.persistence.model.lack_electric.LackElectricExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from lack_electric
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.cst.xinhe.persistence.model.lack_electric.LackElectric">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into lack_electric (lack_electric_id, upload_id, upload_time,
      electric_value, lack_type, is_read
      )
    values (#{lackElectricId,jdbcType=INTEGER}, #{uploadId,jdbcType=INTEGER}, #{uploadTime,jdbcType=TIMESTAMP},
      #{electricValue,jdbcType=INTEGER}, #{lackType,jdbcType=INTEGER}, #{isRead,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.cst.xinhe.persistence.model.lack_electric.LackElectric">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into lack_electric
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="lackElectricId != null">
        lack_electric_id,
      </if>
      <if test="uploadId != null">
        upload_id,
      </if>
      <if test="uploadTime != null">
        upload_time,
      </if>
      <if test="electricValue != null">
        electric_value,
      </if>
      <if test="lackType != null">
        lack_type,
      </if>
      <if test="isRead != null">
        is_read,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="lackElectricId != null">
        #{lackElectricId,jdbcType=INTEGER},
      </if>
      <if test="uploadId != null">
        #{uploadId,jdbcType=INTEGER},
      </if>
      <if test="uploadTime != null">
        #{uploadTime,jdbcType=TIMESTAMP},
      </if>
      <if test="electricValue != null">
        #{electricValue,jdbcType=INTEGER},
      </if>
      <if test="lackType != null">
        #{lackType,jdbcType=INTEGER},
      </if>
      <if test="isRead != null">
        #{isRead,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.cst.xinhe.persistence.model.lack_electric.LackElectricExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from lack_electric
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update lack_electric
    <set>
      <if test="record.lackElectricId != null">
        lack_electric_id = #{record.lackElectricId,jdbcType=INTEGER},
      </if>
      <if test="record.uploadId != null">
        upload_id = #{record.uploadId,jdbcType=INTEGER},
      </if>
      <if test="record.uploadTime != null">
        upload_time = #{record.uploadTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.electricValue != null">
        electric_value = #{record.electricValue,jdbcType=INTEGER},
      </if>
      <if test="record.lackType != null">
        lack_type = #{record.lackType,jdbcType=INTEGER},
      </if>
      <if test="record.isRead != null">
        is_read = #{record.isRead,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update lack_electric
    set lack_electric_id = #{record.lackElectricId,jdbcType=INTEGER},
      upload_id = #{record.uploadId,jdbcType=INTEGER},
      upload_time = #{record.uploadTime,jdbcType=TIMESTAMP},
      electric_value = #{record.electricValue,jdbcType=INTEGER},
      lack_type = #{record.lackType,jdbcType=INTEGER},
      is_read = #{record.isRead,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.cst.xinhe.persistence.model.lack_electric.LackElectric">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update lack_electric
    <set>
      <if test="uploadId != null">
        upload_id = #{uploadId,jdbcType=INTEGER},
      </if>
      <if test="uploadTime != null">
        upload_time = #{uploadTime,jdbcType=TIMESTAMP},
      </if>
      <if test="electricValue != null">
        electric_value = #{electricValue,jdbcType=INTEGER},
      </if>
      <if test="lackType != null">
        lack_type = #{lackType,jdbcType=INTEGER},
      </if>
      <if test="isRead != null">
        is_read = #{isRead,jdbcType=INTEGER},
      </if>
    </set>
    where lack_electric_id = #{lackElectricId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.cst.xinhe.persistence.model.lack_electric.LackElectric">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update lack_electric
    set upload_id = #{uploadId,jdbcType=INTEGER},
      upload_time = #{uploadTime,jdbcType=TIMESTAMP},
      electric_value = #{electricValue,jdbcType=INTEGER},
      lack_type = #{lackType,jdbcType=INTEGER},
      is_read = #{isRead,jdbcType=INTEGER}
    where lack_electric_id = #{lackElectricId,jdbcType=INTEGER}
  </update>

  <select id="findLackElectric" resultType="java.util.HashMap">
    select str.terminal_id AS terminalId,le.upload_time AS uploadTime,
    le.electric_value  AS electricValue,le.lack_type AS lackType,
    s.staff_id AS staffId,s.staff_name AS staffName
    FROM lack_electric le
    left JOIN staff_terminal_relation str
    ON le.upload_id = str.staff_terminal_relation_id
    JOIN staff s ON str.staff_id = s.staff_id
    <where>
      <if test="terminalId != null">
        AND str.terminal_id LIKE CONCAT(#{terminalId},'%')
      </if>

      <if test="staffName != null and staffName != ''">
        AND s.staff_name LIKE CONCAT ( '%', #{staffName}, '%' )
      </if>
    </where>
  </select>

</mapper>
